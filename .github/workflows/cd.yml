name: Continuous Delivery
on: 
  push:
    branches: [ main ]
jobs:
  # build:
  #   name: Execute Build
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: api
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js 16.x
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 16.x
  #         cache: 'npm'
  #         cache-dependency-path: './api/package-lock.json'
  #     - run: npm ci
  #       working-directory: './api'
  #     - run: npm run build --if-present
  #       working-directory: './api'

  # test:
  #   name: Run Unit Tests
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Use Node.js 16.x
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: 16.x
  #       cache: 'npm'
  #       cache-dependency-path: './api/package-lock.json'
  #   - run: npm install
  #     working-directory: './api'
  #   - run: npm test
  #     working-directory: './api'
  
  # push_to_registry:
    # runs-on: ubuntu-latest
    # steps:
    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-1 #${{ env.AWS_REGION }}    
    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

  #   name: Push Docker image to Docker Hub
  #   runs-on: ubuntu-latest
  #   needs: [test]
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v4
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Extract metadata (tags, labels) for Docker
  #       id: meta
  #       uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
  #       with:
  #         images: ${{ vars.DOCKER_IMAGE }}
  #         tags: latest
  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
  #       with:
  #         context: ./api
  #         file: ./api/Dockerfile
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  
  tf_code_check:
    name: Terraform Validation and Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Setup Terraform CLI
      uses: hashicorp/setup-terraform@v2.0.2
    # - name: Terraform init, plan and apply
      # run: |
      #   echo "** Running Terraform Init**"
      #   terraform init

      #   echo "** Running Terraform Validate**"
      #   terraform validate

      #   echo "** Running Terraform Plan**"
      #   terraform plan

      #   echo "** Running Terraform Apply**"
      #   terraform apply -auto-approve     
    - run: terraform -chdir='./k8s-infra' init
    - run: terraform -chdir='./k8s-infra' validate
    - run: terraform -chdir='./k8s-infra' plan
    - run: terraform -chdir=k8s-infra apply --auto-approve     
      working-directory: './k8s-infra'
    - name: KUBECTL  
      uses: azure/setup-kubectl@v3
    - run: aws sts get-caller-identity
    - run: aws eks update-kubeconfig --region us-east-1 --name no2-soat-ntsoatcluster
    - run: kubectl get svc
    - run: kubectl apply -f ./api/k8s/soatapp-configmap.yml
    - run: kubectl apply -f ./api/k8s/secrets.yml
    - run: kubectl apply -f ./api/k8s/soatapp.yml
    - run: kubectl apply -f ./api/k8s/soatapp-svc.yml